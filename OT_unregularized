{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import numpy.linalg as la\n",
    "from IPython.display import clear_output\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.interpolate as intp\n",
    "\n",
    "df = pd.read_csv('mnist_test.csv').sort_values(by=['7']).reset_index().drop(['index'],axis=1)\n",
    "ar = df['7'].to_numpy()\n",
    "counts = np.zeros(11)\n",
    "for i in range(10):\n",
    "    counts[i+1] =  counts[i] + ar[ar == i].shape[0]\n",
    "    \n",
    "def mnist_instance(df,counts,rng,i):\n",
    "    #generates an OT instance corresponding to two randomly chosen digits from MNIST with label i\n",
    "    n = 28\n",
    "    x1 = rng.integers(counts[i],counts[i+1])\n",
    "    x2 = rng.integers(counts[i],counts[i+1])\n",
    "    p = df.iloc[x1,1:].to_numpy() + 1/(n**2); p = p/p.sum()\n",
    "    q = df.iloc[x2,1:].to_numpy() + 1/(n**2); q = q/q.sum()\n",
    "    b = np.append(p,q)\n",
    "    C = np.zeros((n**2,n**2))\n",
    "    for i1 in range(n):\n",
    "        for i2 in range(n):\n",
    "            for j1 in range(n):\n",
    "                for j2 in range(n):\n",
    "                    C[n*i1+i2,n*j1+j2] = (i1-j1)**2 + (i2-j2)**2\n",
    "    return b, (C/C.max()).reshape(-1,1).squeeze()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mult_A(x):\n",
    "    #computes Ax\n",
    "    n = len(x)\n",
    "    k = int(np.sqrt(n))\n",
    "    return np.append(x.reshape(k,k).sum(axis=0),x.reshape(k,k).sum(axis=1))\n",
    "\n",
    "def mult_AT(y):\n",
    "    #computes A^T y\n",
    "    q = len(y)\n",
    "    k = q//2\n",
    "    a = y[:k].reshape(1,-1)\n",
    "    b = y[k:].reshape(-1,1)\n",
    "    return (a + b).reshape(-1,1).squeeze()\n",
    "\n",
    "#the function: C^T X +  y^T [AX - b]\n",
    "def grad_x(b,C,x,y):\n",
    "    return C + (mult_AT(y))\n",
    "\n",
    "def grad_y(b,C,x,y):\n",
    "    return (b - mult_A(x))\n",
    "\n",
    "def alt_x(b,C,d_x,w_y,entropy_factor):\n",
    "    z = w_y**2\n",
    "    q = -(mult_AT(z) + d_x)/entropy_factor\n",
    "    scale = np.max(q)\n",
    "    q = q - scale*np.ones(len(q))\n",
    "    x = np.exp(q)\n",
    "    return x/np.sum(x) #has to lie on simplex \n",
    "\n",
    "def alt_y(b,C,d_y,w_x):\n",
    "    y = np.zeros(len(d_y))\n",
    "    v = mult_A(w_x)\n",
    "    for i in range(len(d_y)):\n",
    "        signing = np.sign(d_y[i])*np.sign(v[i])\n",
    "        if abs(2*v[i]) > abs(d_y[i]):\n",
    "            y[i] = -signing*d_y[i]/(2*v[i])\n",
    "        elif signing == 1:\n",
    "            y[i] = -1\n",
    "        else:\n",
    "            y[i] = 0\n",
    "        if y[i] > 0:\n",
    "            println(\"Positive y\")\n",
    "    return y\n",
    "\n",
    "#computes the regularizer gradient\n",
    "def grad_r(x,y,entropy_factor):\n",
    "    z = y**2\n",
    "    gr_x = (mult_AT(z)) + entropy_factor*np.log(x)\n",
    "    gr_y = 2*(y*(mult_A(x)))\n",
    "    return gr_x, gr_y\n",
    "\n",
    "def prox(b,C,z_x,z_y,g_x,g_y,entropy_factor,tol):\n",
    "    out_x, out_y = z_x, z_y\n",
    "    v = out_y\n",
    "    zgrad_x = grad_r(z_x,z_y,entropy_factor)[0]\n",
    "    zgrad_y = grad_r(z_x,z_y,entropy_factor)[1]\n",
    "    d_x = g_x - zgrad_x\n",
    "    d_y = g_y - zgrad_y\n",
    "    out_x = alt_x(b,C,d_x,out_y,entropy_factor)\n",
    "    alt_steps = 1\n",
    "    while True:\n",
    "        out_y = alt_y(b,C,d_y,out_x)\n",
    "        v = alt_x(b,C,d_x,out_y,entropy_factor)\n",
    "        alt_steps += 1\n",
    "        if la.norm(v-out_x,1) < tol:\n",
    "            return v, out_y, alt_steps\n",
    "        if alt_steps > 100:\n",
    "            println(\"Prox failure\")\n",
    "        out_x = v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sherman_prox(n,b,C,T,L):\n",
    "    alt_steps = []\n",
    "    progress = []\n",
    "    z_x = np.ones(n**2)/(n**2)\n",
    "    z_y = np.zeros(2*n)\n",
    "    w_x = np.zeros(n**2)/(n**2)\n",
    "    w_y = np.zeros(2*n)\n",
    "    counter = 0\n",
    "    minval = 1e2\n",
    "    out_x = w_x \n",
    "    i = 0\n",
    "    out_y = w_y\n",
    "    while counter < T:\n",
    "        g_x = grad_x(b,C,z_x,z_y)\n",
    "        g_y = grad_y(b,C,z_x,z_y)\n",
    "        counter += 1\n",
    "        tol = 5e2/(i+1)**2\n",
    "        w_x, w_y, d = prox(b,C,z_x,z_y,g_x,g_y,L,tol) \n",
    "        counter += d\n",
    "        g_x = grad_x(b,C,w_x,w_y)\n",
    "        g_y = grad_y(b,C,w_x,w_y)\n",
    "        counter += 1\n",
    "        z_x, z_y, d = prox(b,C,z_x,z_y,g_x,g_y,L,tol)\n",
    "        counter += d\n",
    "        if i%10 == 0:\n",
    "            clear_output(wait=True)\n",
    "            print(\"Completed \", i, \" steps\")\n",
    "            print(\"Alternating Steps:\", counter)\n",
    "            progress.append(np.dot(C,w_x) + la.norm(mult_A(w_x)- b,1))\n",
    "            alt_steps.append(counter)\n",
    "            print(\"Current Value: \", progress[-1])\n",
    "        i += 1\n",
    "    return alt_steps, progress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#NEW:\n",
    "def mult_A2(x):\n",
    "    return np.append(x.T@np.ones(n), x@np.ones(n))\n",
    "\n",
    "def clip(x):\n",
    "    #returns x, clipped to be between -1 and 1\n",
    "    for idx in range(len(x)):\n",
    "        if x[idx] > 1:\n",
    "            x[idx] = 1\n",
    "        elif x[idx] < -1:\n",
    "            x[idx] = -1\n",
    "    return x\n",
    "\n",
    "\n",
    "def mult_AT2(y):\n",
    "    #computes A^T y\n",
    "    q = len(y)\n",
    "    k = q//2\n",
    "    a = y[:k].reshape(1,-1)\n",
    "    b = y[k:].reshape(-1,1)\n",
    "    return (a + b)\n",
    "\n",
    "def prox_full_transportmap(b,C,xbar,ybar,alpha,tol,beta):\n",
    "    x,y = xbar,ybar\n",
    "    A_xbar = mult_A2(xbar); A_x = A_xbar\n",
    "    alt_steps = 0\n",
    "    while True:\n",
    "        #y[k+1] responds to x[k]\n",
    "        yp1 = clip((ybar*A_xbar/A_x) + (1-b/A_x)/(2*beta))\n",
    "        \n",
    "        #x[k+1] responds to y[k+1]\n",
    "        d_x = mult_AT2(-yp1-beta*yp1**2 +beta*ybar**2)- C \n",
    "        xp1 = xbar*np.exp(d_x); xp1= xp1/xp1.sum()\n",
    "        A_xp1 = mult_A2(xp1)\n",
    "        alt_steps += 1\n",
    "        if la.norm(yp1-y,1) < tol:\n",
    "            #y'[k+1] responds to x[k+1]\n",
    "            yp1 = clip((ybar*A_xbar/A_xp1) + (1-b/A_xp1)/(2*beta))\n",
    "            return xp1, yp1, alt_steps\n",
    "        if alt_steps > 100:\n",
    "            raise Exception(\"Alternating minimization failed to converge\")\n",
    "        #k -> k+1\n",
    "        x,y,A_x = xp1, yp1, A_xp1\n",
    "            \n",
    "def sherman_proxpoint_full_transportmap(n,b,C,T,alpha,beta):\n",
    "    #this is a version of the algorithm which stores the full transport map every iteration\n",
    "    z_x = np.ones((n,n))/(n**2)\n",
    "    z_y = np.zeros(2*n)\n",
    "    counter = 0\n",
    "    xbest, ybest = z_x, z_y\n",
    "    best = 10\n",
    "    steps = []\n",
    "    vals = []\n",
    "    i_disp = display(f\"Iteration number: {0}\",display_id=True)\n",
    "    best_disp = display(f\"Best marginals: {best}\",display_id=True)\n",
    "    for i in range(T):\n",
    "        tol = 1e5/(i+1)**2\n",
    "        i_disp.update(f\"Iteration number: {i}\")\n",
    "        z_x, z_y, d = prox_full_transportmap(b,C,z_x,z_y,alpha,tol,beta)\n",
    "        if i%10 == 0:\n",
    "            best = np.sum(z_x*C) + la.norm(mult_A2(z_x)-b,1)\n",
    "            best_disp.update(f\"Best marginals: {best}\")\n",
    "            steps.append(counter)\n",
    "            vals.append(best)\n",
    "        counter += d\n",
    "    return steps, vals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed  440  steps\n",
      "Alternating Steps: 2646\n",
      "Current Value:  0.00821647945644056\n"
     ]
    }
   ],
   "source": [
    "q=1\n",
    "problems = [79543, 893654, 439093, 901514, 892506, 213308, 730353, 857810, 248698, 639250, 941094, 848481, 225911, 438703, 656015, 472702, 464413, 330074, 291973, 67746]\n",
    "digit = [0, 8, 2, 9, 0, 0, 5, 3, 8, 5, 9, 0, 4, 0, 0, 7, 4, 1, 7, 7]\n",
    "n = 784;\n",
    "alpha = 2; beta = 1; T = 2500; \n",
    "t = np.linspace(10,T,500)\n",
    "t_new = np.linspace(10,T,500)\n",
    "int_fnval = np.zeros((q,500))\n",
    "new_int_fnval = np.zeros((q,500))\n",
    "for i in range(q):\n",
    "    rng = np.random.default_rng(problems[i])\n",
    "    b, C = mnist_instance(df,counts,rng,digit[i])\n",
    "    print(\"New Alg: #\", i+1)\n",
    "    new_steps, new_fnval = sherman_proxpoint_full_transportmap(n,b,C.reshape(784,784),T+150,alpha,beta)\n",
    "    f = intp.interp1d(new_steps, new_fnval)\n",
    "    new_int_fnval[i,:] += f(t_new)\n",
    "    print(\"Mirror Prox: #\", i+1)\n",
    "    steps,fnval = sherman_prox(n,b,C,T+150,4)\n",
    "    f = intp.interp1d(steps,fnval)\n",
    "    int_fnval[i,:]  += f(t)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "true_opt=np.zeros([q])\n",
    "int_fnval_rescaled = np.zeros((q,500))\n",
    "new_int_fnval_rescaled = np.zeros((q,500))\n",
    "for i in range(q):\n",
    "    true_opt[i] = new_int_fnval[i,-1]\n",
    "    new_int_fnval_rescaled[i,:] = new_int_fnval[i,:]-true_opt[i]\n",
    "    int_fnval_rescaled[i,:] = int_fnval[i,:]-true_opt[i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.errorbar(t_new[1:20],np.mean(new_int_fnval,axis=0)[1:20],yerr= np.std(new_int_fnval_rescaled,axis=0)[1:20],errorevery = 1)\n",
    "plt.errorbar(t_new[1:20],np.mean(int_fnval,axis=0)[1:20],yerr= np.std(int_fnval_rescaled,axis=0)[1:20], errorevery = 1)\n",
    "plt.title(\"Unregularized Optimal Transport\")\n",
    "plt.legend([\"Box-Simplex Prox-Point\", \"Box-Simplex Extragradient [JST19]\"])\n",
    "plt.xlabel(\"Alternating Minimization Steps\")\n",
    "plt.ylabel(\"Transportation Cost\")\n",
    "plt.savefig(\"noregTC_1_apdx.png\",bbox_inches=\"tight\")\n",
    "plt.show()\n",
    "\n",
    "plt.errorbar(t_new[400:],np.mean(new_int_fnval,axis=0)[400:],yerr= np.std(new_int_fnval_rescaled,axis=0)[400:], errorevery = 5)\n",
    "plt.errorbar(t_new[400:],np.mean(int_fnval,axis=0)[400:],yerr= np.std(int_fnval_rescaled,axis=0)[400:], errorevery = 5)\n",
    "plt.title(\"Unregularized Optimal Transport\")\n",
    "plt.legend([\"Box-Simplex Prox-Point\", \"Box-Simplex Extragradient [JST19]\"])\n",
    "plt.xlabel(\"Alternating Minimization Steps\")\n",
    "plt.ylabel(\"Transportation Cost\")\n",
    "plt.savefig(\"noregTC_2_apdx.png\",bbox_inches=\"tight\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
